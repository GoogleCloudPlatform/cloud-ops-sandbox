# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "End to End - Latest"
on:
  push:
    # run on pushes to master or release/*
    branches:
      - master
      - release/*
      - e2e*
  workflow_dispatch:
    # trigger through UI or API
jobs:
  end-to-end-latest:
    runs-on: [self-hosted, e2e-worker]
    steps:
    - uses: actions/checkout@v2
    - name: Clean Project State
      run: |
        # clean GCP resources
        .github/workflows/e2e_scripts/clean.sh
    - name: Build Sandbox Services
      run: |
        set -x
        skaffold config set --global local-cluster false
        # tag with git hash
        skaffold build --default-repo=gcr.io/$PROJECT_ID/tests \
                       --tag=$GITHUB_SHA
      env:
        PROJECT_ID: ${{ secrets.E2E_PROJECT_ID  }}
    - name: Rewrite Manifests
      run: |
        set -x
        OLD_PATH=gcr.io/stackdriver-sandbox-230822
        NEW_PATH=gcr.io/stackdriver-sandbox-e2e/tests/$OLD_PATH
        # use newly built containers instead of latest pushed
        find "./kubernetes-manifests" -name '*.yaml' -exec sed -i -e "s#$OLD_PATH#$NEW_PATH#g" {} \;
        find "./kubernetes-manifests" -name '*.yaml' -exec sed -i -e "s#:latest#:$GITHUB_SHA#g" {} \;
    - name: Run Install Script
      run: |
        set -x
        # build cloud shell image
        docker build -t test-cloud-shell:$GITHUB_SHA ./cloud-shell
        # run install script
        docker run --rm \
          -e project_id=$PROJECT_ID \
          -e skip_workspace_prompt=1 \
          -e service_wait=1 \
          -v ~/.config:/root/.config \
          -v `pwd`:/sandbox-shared \
          --entrypoint /sandbox-shared/.github/workflows/e2e_scripts/run_install.sh \
          test-cloud-shell:$GITHUB_SHA
      env:
        PROJECT_ID: ${{ secrets.E2E_PROJECT_ID  }}
    - name: Run Provisioning Test
      run: |
        set -x
        # get cluster zones
        CLUSTER_ZONE=$(gcloud container clusters list --filter="name:cloud-ops-sandbox" --project $PROJECT_ID --format="value(zone)")
        LOADGEN_ZONE=$(gcloud container clusters list --filter="name:cloud-ops-sandbox-loadgenerator" --project $PROJECT_ID --format="value(zone)")
        # build provisioning test image
        docker build -t test-provisioning:$GITHUB_SHA tests/provisioning/.
        # run provisioning tests
        docker run --rm \
          -e GOOGLE_CLOUD_PROJECT=$PROJECT_ID \
          -e ZONE=$CLUSTER_ZONE \
          -e LOADGEN_ZONE=$LOADGEN_ZONE \
          -v ~/.config:/root/.config \
          test-provisioning:$GITHUB_SHA
      env:
        PROJECT_ID: ${{ secrets.E2E_PROJECT_ID }}
    - name: Run Monitoring Integration Tests
      run: |
        set -x
        # install dependencies
        python3 -m pip install -r tests/requirements.txt
        # authenticate cluster
        CLUSTER_ZONE=$(gcloud container clusters list --filter="name:cloud-ops-sandbox" --project $PROJECT_ID --format="value(zone)")
        gcloud container clusters get-credentials cloud-ops-sandbox --zone "$CLUSTER_ZONE"
        # run tests
        python3 tests/monitoring_integration_test.py $PROJECT_ID
      env:
        PROJECT_ID: ${{ secrets.E2E_PROJECT_ID  }}
    - name: Clean Project State
      if: ${{ always()  }}
      run: |
        # clean GCP resources
        .github/workflows/e2e_scripts/clean.sh
