# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "End to End - Release"
on:
  schedule:
    # run every day at 8pm
    - cron:  '* 20 * * *'
  push:
    # run on pushes to test branch
    branches:
      - e2e*
  workflow_dispatch:
    # trigger through UI or API
jobs:
  end-to-end-released:
    runs-on: [self-hosted, e2e-worker]
    steps:
    - uses: actions/checkout@v2
    - name: Clean Project State
      timeout-minutes: 30
      run: |
        # clean GCP resources
        .github/workflows/e2e_scripts/clean.sh
    - name: Extract Website Values
      timeout-minutes: 30
      id: website_variables
      run: |
        set -x
        BTN_CONTENT=$(curl https://cloud-ops-sandbox.dev/ | grep console-btn)
        REPO=$(echo $BTN_CONTENT | grep -o -P '(?<=cloudshell_git_repo\=).*?(?=&)')
        echo ::set-output name=repo::${REPO}
        BRANCH=$(echo $BTN_CONTENT | grep -o -P '(?<=cloudshell_git_branch\=).*?(?=&)')
        echo ::set-output name=branch::${BRANCH}
        WORKING_DIR=$(echo $BTN_CONTENT | grep -o -P '(?<=cloudshell_working_dir\=).*?(?=&)')
        echo ::set-output name=dir::${WORKING_DIR}
        CLOUDSHELL_IMAGE=$(echo $BTN_CONTENT | grep -o -P '(?<=cloudshell_image\=).*?(?=")')
        echo ::set-output name=cloudshell_image::${CLOUDSHELL_IMAGE}
    - name: Run Install Script
      timeout-minutes: 30
      run: |
        set -x
        # run install script
        docker run --rm \
          -e project_id=$PROJECT_ID \
          -e skip_workspace_prompt=1 \
          -e release_repo=${{ steps.website_variables.outputs.repo }} \
          -e release_branch=${{ steps.website_variables.outputs.branch }} \
          -e release_dir=${{ steps.website_variables.outputs.dir }} \
          -v ~/.config:/root/.config \
          -v `pwd`:/sandbox-shared \
          --entrypoint /sandbox-shared/.github/workflows/e2e_scripts/run_install.sh \
          ${{ steps.website_variables.outputs.cloudshell_image }}
      env:
        PROJECT_ID: ${{ secrets.E2E_PROJECT_ID  }}
    - name: Checkout Release Code
      timeout-minutes: 30
      run: |
        set -x
        git clone ${{ steps.website_variables.outputs.repo  }} ./release-code
        cd ./release-code
        git checkout ${{ steps.website_variables.outputs.branch }}
    - name: Run Provisioning Test
      timeout-minutes: 30
      run: |
        set -x
        # change to previous release code state
        cd ./release-code
        # get cluster zone
        CLUSTER_ZONE=$(gcloud container clusters list --filter="name:cloud-ops-sandbox" --project $PROJECT_ID --format="value(zone)")
        # build provisioning test image
        docker build -t test-provisioning:$GITHUB_SHA-release tests/provisioning/.
        # run provisioning tests
        docker run --rm \
          -e GOOGLE_CLOUD_PROJECT=$PROJECT_ID \
          -e ZONE=$CLUSTER_ZONE \
          -v ~/.config:/root/.config \
          test-provisioning:$GITHUB_SHA-release
      env:
        PROJECT_ID: ${{ secrets.E2E_PROJECT_ID }}
    - name: Run Monitoring Integration Tests
      timeout-minutes: 30
      run: |
        set -x
        # change to previous release code state
        cd ./release-code
        # install dependencies
        python3 -m pip install -r tests/requirements.txt
        # authenticate cluster
        CLUSTER_ZONE=$(gcloud container clusters list --filter="name:cloud-ops-sandbox" --project $PROJECT_ID --format="value(zone)")
        gcloud container clusters get-credentials cloud-ops-sandbox --zone "$CLUSTER_ZONE"
        # run tests
        python3 tests/monitoring_integration_test.py $PROJECT_ID
      env:
        PROJECT_ID: ${{ secrets.E2E_PROJECT_ID  }}
    - name:  Test Using Existing Project
      timeout-minutes: 30
      run: |
        set -x
        # run install script
        docker run --rm \
          -e project_id=$PROJECT_ID \
          -e skip_workspace_prompt=1 \
          -e release_repo=${{ steps.website_variables.outputs.repo }} \
          -e release_branch=${{ steps.website_variables.outputs.branch }} \
          -e release_dir=${{ steps.website_variables.outputs.dir }} \
          -v ~/.config:/root/.config \
          -v `pwd`:/sandbox-shared \
          --entrypoint /sandbox-shared/.github/workflows/e2e_scripts/run_install.sh \
          ${{ steps.website_variables.outputs.cloudshell_image }}
      env:
        PROJECT_ID: ${{ secrets.E2E_PROJECT_ID  }}
    - name: Clean Project State
      timeout-minutes: 30
      if: ${{ always()  }}
      run: |
        # clean GCP resources
        .github/workflows/e2e_scripts/clean.sh
